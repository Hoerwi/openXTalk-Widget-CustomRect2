/**
Summary: Allows the individual corners of a rectangle to be given a separate radius.

Description:
This widget allows the individual corners of a rectangle to be given a separate radius.
The Label of the widget could be rotated.


Name: ShowTopLeft
Type: property

Syntax: set showTopLeft of <widget> to true|false

Summary: the round of the corner can be toggled on or off


Name: ShowTopRight
Type: property

Syntax: set showTopRight of <widget> to true|false

Summary: the round of the corner can be toggled on or off


Name: ShowBottomLeft
Type: property

Syntax: set showBottomLeft of <widget> to true|false

Summary: the round of the corner can be toggled on or off


Name: ShowBottomRight
Type: property

Syntax: showBottomRight of <widget> to true|false

Summary: the round of the corner can be toggled on or off


Name: rotLabel
Type: property

Syntax: set the rotLabel of <widget> to <Number>

Summary: The label of the widget can be adjusted 360Â°


Name: TopLeftRadius
Type: property

Syntax: set TopLeftRadius of <widget> to <Number>

Name: TopRightRadius
Type: property

Syntax: set TopRightRadius of <widget> to <Number>

Summary: The Radius of the Corner, should not set over 75


Name: BottomLeftRadius
Type: property

Syntax: set BottomLeftRadius of <widget> to <Number>

Summary: The Radius of the Corner, should not set over 75


Name: BottomRightRadius
Type: property

Syntax: set BottomRightRadius of <widget> to <Number>

Summary: The Radius of the Corner, should not set over 75
*/
widget open.widgets.hoerwi.customrect

-- DEPENDENCY DECLARATIONS
	use com.livecode.canvas
	use com.livecode.widget
	use com.livecode.math
	use com.livecode.engine
	use com.livecode.library.widgetutils

-- METADATA
	metadata title is "customRect"
	metadata author is "Andreas Strauch"
	metadata version is "2.0.0"
	metadata svgicon is "M0.510 125.434 C 1.201 249.714,1.257 251.016,6.597 267.052 C 25.722 324.488,61.831 367.226,111.969 391.766 C 152.936 411.818,150.701 411.561,284.056 411.561 L 400.187 411.561 399.490 286.127 C 398.799 161.847,398.743 160.545,393.403 144.509 C 374.278 87.072,338.169 44.335,288.031 19.795 C 247.064 -0.257,249.299 -0.000,115.944 0.000 L -0.187 0.000 0.510 125.434 M347.285 201.441 C 374.811 207.275,383.165 215.454,385.335 238.693 C 389.256 280.679,377.613 293.262,317.715 311.770 C 283.301 322.404,272.994 333.518,272.883 360.116 L 272.832 372.254 328.324 372.254 L 383.815 372.254 383.815 382.659 L 383.815 393.064 304.188 393.064 L 224.561 393.064 222.967 382.434 C 215.927 335.487,230.706 315.634,287.114 296.268 C 333.217 280.440,335.260 278.341,335.260 246.800 C 335.260 219.892,334.133 218.706,307.590 217.685 C 273.100 216.358,268.431 221.607,272.140 257.541 L 273.479 270.520 248.983 270.520 L 224.487 270.520 222.966 262.413 C 216.046 225.524,228.653 206.289,263.584 200.441 C 276.376 198.300,335.815 199.010,347.285 201.441 "

-- VARIABLES
	private variable mRotLabel 			as Real
	private variable mLabel 			as String
	private variable mShowLabel			as Boolean
	private variable mShowBorder		as Boolean
	private variable mShowBackground 	as Boolean
	private variable mStroke			as Real
	private variable mPath              as Path
	private variable mAlign				as String

-- CORNER VARIABLES
	private variable mTLRadius          as Number
	private variable mTRRadius          as Number
	private variable mBLRadius          as Number
	private variable mBRRadius          as Number
	private variable mShowTopLeft      	as Boolean
	private variable mShowTopRight     	as Boolean
	private variable mShowBottomRight  	as Boolean
	private variable mShowBottomLeft   	as Boolean

-- some stuff 
	private variable mFormattedWidth as Real
	private variable mFormattedHeight as Real
	property "formattedWidth" get mFormattedWidth
		metadata formattedWidth.user_visible is "false"
	property "formattedHeight" get mFormattedHeight
		metadata formattedHeight.user_visible is "false"

-- Basic 
	property "label" get mLabel set setLabel
		metadata label.editor is "com.livecode.pi.string"
		metadata label.default is "customRect2"
		metadata label.label is "Label"
	
	property "showLabel" get mShowLabel set setShowLabel
		metadata showLabel.default is "true"
		metadata ShowLabel.label is "Show Label"
	
	-- Label Rotation moved to section "TEXT" --	
	property "rotlabel" get mRotLabel set setRotLabel
		metadata rotlabel.section is "Text"
		metadata rotlabel.editor is "com.livecode.pi.number"
		metadata rotlabel.label is "Label Rotation"
		metadata rotlabel.default is "0"
		metadata rotlabel.step is "1"
		metadata rotlabel.min is "0"
		metadata rotlabel.max is "360" 
		
		metadata textStyle.editor is "com.livecode.pi.textstyle"
	
	property "textalign" get mAlign set setAlign
		metadata textalign.editor is "com.livecode.pi.textalign"
	
	property "opaque" get mShowBackground set setShowBackground
		metadata opaque.default is "true"
		metadata opaque.label is "Opaque"

	property "showBorder" get mShowBorder set setShowBorder
		metadata showBorder.default is "false"
		metadata showBorder.label is "Show border"

	property "bordersize" get mStroke set setStroke
		metadata bordersize.label is "bordersize"
		metadata bordersize.editor is "com.livecode.pi.number"
		metadata bordersize.default is "0"	
		
-- The Cornermagic -----------------------------------

-- Show or not Show
	property ShowTopLeft               get mShowTopLeft       set setShowTopLeft
	property ShowTopRight              get mShowTopRight      set setShowTopRight
	property ShowBottomLeft            get mShowBottomLeft    set setShowBottomLeft
	property ShowBottomRight           get mShowBottomRight   set setShowBottomRight
	
		metadata ShowTopLeft.label is "Show Round Top Left"
		metadata ShowTopRight.label is "Show Round Top Right"
		metadata ShowBottomLeft.label is "Show Round Bottom Left"
		metadata ShowBottomRight.label is "Show Round Bottom Right"

-- define the radius of each corner 
	
	property "TopLeftRadius"          get mTLRadius             set setTLRadius
	property "TopRightRadius"         get mTRRadius             set setTRRadius
	property "BottomLeftRadius"       get mBLRadius             set setBLRadius
	property "BottomRightRadius"      get mBRRadius             set setBRRadius
	
		metadata TopLeftRadius.label is "Top Left"
		metadata TopLeftRadius.editor is "com.livecode.pi.number"
		metadata TopLeftRadius.default is "1"
		metadata TopLeftRadius.step is "1"
		metadata TopLeftRadius.min is "0"
		metadata TopLeftRadius.max is "75"
	
		metadata TopRightRadius.label is "Top Right"
		metadata TopRightRadius.editor is "com.livecode.pi.number"
		metadata TopRightRadius.default is "45"
		metadata TopRightRadius.step is "1"
		metadata TopRightRadius.min is "0"
		metadata TopRightRadius.max is "75"
	
		metadata BottomLeftRadius.label is "Bottom Left"
		metadata BottomLeftRadius.editor is "com.livecode.pi.number"
		metadata BottomLeftRadius.default is "45"
		metadata BottomLeftRadius.step is "1"
		metadata BottomLeftRadius.min is "0"
		metadata BottomLeftRadius.max is "75"
	
		metadata BottomRightRadius.label is "Bottom Right"
		metadata BottomRightRadius.editor is "com.livecode.pi.number"
		metadata BottomRightRadius.default is "1"
		metadata BottomRightRadius.step is "1"
		metadata BottomRightRadius.min is "0"
		metadata BottomRightRadius.max is "75"
	
-- Colors & Pattern ----------------------------------------------------------

		metadata foregroundColor.editor is "com.livecode.pi.color"
		metadata foregroundColor.default is ""
		metadata foregroundColor.section is "Colors"
		metadata foregroundColor.label is "Text Fill"

		metadata backgroundColor.editor is "com.livecode.pi.color"
		metadata backgroundColor.default is "192,192,192"
		metadata backgroundcolor.section is "Colors"
		metadata backgroundColor.label is "Background Fill"
	
		metadata borderColor.editor is "com.livecode.pi.color"
		metadata borderColor.default is ""
		metadata bordercolor.section is "Colors"
		metadata borderColor.label is "Border Fill"
	
		metadata foregroundPattern.editor is "com.livecode.pi.pattern"
		metadata foregroundPattern.default is ""
		metadata foregroundPattern.section is "Colors"
		metadata foregroundPattern.label is "Text Pattern"
	
		metadata backgroundPattern.editor is "com.livecode.pi.pattern"
		metadata backgroundPattern.default is ""
		metadata backgroundPattern.section is "Colors"
		metadata backgroundPattern.label is "Background Pattern"
	
		metadata borderPattern.editor is "com.livecode.pi.pattern"
		metadata borderPattern.default is ""
		metadata borderPattern.section is "Colors"
		metadata borderPattern.label is "Border Pattern"
	
	
-- Handler for calculate the shape -------------------------------------------------------

	private handler setTLRadius(in pRadius as Number)
		put max(pRadius, mStroke) into mTLRadius
		calcShape()
		redraw all
	end handler
	
	private handler setTRRadius(in pRadius as Number)
		put max(pRadius, mStroke) into mTRRadius
		calcShape()
		redraw all
	end handler
	
	private handler setBLRadius(in pRadius as Number)
		put max(pRadius, mStroke) into mBLRadius
		calcShape()
		redraw all
	end handler
	
	private handler setBRRadius(in pRadius as Number)
		put max(pRadius, mStroke) into mBRRadius
		calcShape()
		redraw all
	end handler

	private handler setShowTopLeft(in pBoolean as Boolean)
		put pBoolean into mShowTopLeft
		calcShape()
		redraw all
	end handler

	private handler setShowTopRight(in pBoolean as Boolean)
		put pBoolean into mShowTopRight
		calcShape()
		redraw all
	end handler

	private handler setShowBottomRight(in pBoolean as Boolean)
		put pBoolean into mShowBottomRight
		calcShape()
		redraw all
	end handler

	private handler setShowBottomLeft(in pBoolean as Boolean)
		put pBoolean into mShowBottomLeft
		calcShape()
		redraw all
	end handler
	
	private handler calcShape() returns nothing
 	
		variable ttlRadius as Number
		variable ttrRadius as Number
		variable tblRadius as Number
		variable tbrRadius as Number
		variable tHalfStroke as Number  
	
		if mShowBorder then
			put mStroke/2 into tHalfStroke
		else
			put 0 into tHalfStroke
		end if
		
		variable tHeight as Number
		variable tWidth as Number

		put mTLRadius into ttlRadius
		put mTRRadius into ttrRadius
		put mBLRadius into tblRadius
		put mBRRadius into tbrRadius
		
		put the empty path into mPath
		put my width - tHalfStroke into tWidth
		put my height - tHalfStroke into tHeight
	
	-- Make sure radius doesn't exceed what is allowed based on widget height
		put min(ttlRadius, tHeight /2) into ttlRadius
		put min(ttrRadius, tHeight /2) into ttrRadius
		put min(tblRadius, tHeight /2) into tblRadius
		put min(tbrRadius, tHeight /2) into tbrRadius
	
	-- subpath 
		if mShowTopLeft then
			move to point [tHalfStroke, ttlRadius] on mPath
			arc through point [tHalfStroke, tHalfStroke] to point [tWidth/2, tHalfStroke] with radius ttlRadius on mPath
		else
			move to point [tHalfStroke, tHalfStroke] on mPath
		end if

		if mShowTopRight then
			arc through point [tWidth, tHalfStroke] to point [tWidth, tHeight/2] with radius ttrRadius on mPath
		else
			line to point [my width, tHalfStroke] on mPath
			line to point [tWidth, tHalfStroke] on mPath
		end if

		if mShowBottomRight then
			arc through point [tWidth, tHeight] to point [tWidth/2, tHeight] with radius tbrRadius on mPath

		else
			line to point [tWidth, my height] on mPath
			line to point [tWidth, tHeight] on mPath
		end if

		if mShowBottomLeft then
			arc through point [tHalfStroke, tHeight] to point [tHalfStroke,tHeight/2] with radius tblRadius on mPath
		else
			line to point [0, tHeight] on mPath
			line to point [tHalfStroke, tHeight] on mPath
			line to point [tHalfStroke, tHeight/2] on mPath
		end if

		// Close the path with a line back to the starting point
		if mShowTopLeft then
			close path on mPath
		else
			line to point [tHalfStroke, 0] on mPath
		end if
		
end handler

-- Handler -----------------------------------------------------

	public handler setAlign(in pAlign as String) returns nothing
		put pAlign into mAlign
		calcShape()
		redraw all
	end handler

	private handler setShowLabel(in pShowLabel as Boolean) returns nothing
		if pShowLabel is mShowLabel then
			return
		end if
		put pShowLabel into mShowLabel
		redraw all
	end handler

	private handler setShowBackground(in pShowBackground as Boolean) returns nothing
		if pShowBackground is mShowBackground then
			return
		end if
		put pShowBackground into mShowBackground
		redraw all
	end handler

	public handler setLabel(in pText as String) returns nothing
		put pText into mLabel
		redraw all
	end handler

	public handler setRotLabel(in pRotLabel as Number) returns nothing
		put pRotLabel into mRotLabel
		redraw all
	end handler

	private handler setShowBorder(in pShowBorder as Boolean) returns nothing
		if pShowBorder is mShowBorder then
			return
		end if
		put pShowBorder into mShowBorder
		calcShape()
		redraw all
	end handler

	public handler setStroke(in pStroke as Real)
		if pStroke > 5 then 
			put 5 into pStroke
		end if
		put pStroke into mStroke
		calcShape()
		redraw all
	end handler

-- Create, Save and Load --------------------

	public handler OnCreate()
		setLabel("customRect2")
		setRotLabel(0)
			put 0 into mStroke
			put 1 into mTLRadius
			put 25 into mTRRadius
			put 25 into mBLRadius
			put 1 into mBRRadius
			put the empty path into mPath
			put false into mShowTopLeft
			put true into mShowTopRight
			put true into mShowBottomLeft
			put false into mShowBottomRight
			put true into mShowBackground
			put false into mShowBorder
			put true into mShowLabel
	end handler


	public handler onSave(out rProperties as Array)
			put the empty array into rProperties
			put mLabel into rProperties["label"]
			put mRotLabel	into rProperties["rotlabel"]
			put mTLRadius into rProperties["TLradius"]
			put mTRRadius into rProperties["TRradius"]
			put mBLRadius into rProperties["BLradius"]
			put mBRRadius into rProperties["BRradius"]
			put mShowTopLeft into rProperties["ShowTopLeft"]
			put mShowTopRight into rProperties["ShowTopRight"]
			put mShowBottomLeft into rProperties["ShowBottomLeft"]
			put mShowBottomRight into rProperties["ShowBottomRight"]
			put mStroke into rProperties["bordersize"]
			put mShowBorder into rProperties["showBorder"]
			put mShowBackground into rProperties["opaque"]
			put mShowLabel into rProperties["showLabel"]
	end handler

	public handler onLoad(in pProperties as Array)
			put pProperties["label"] into mLabel
			put pProperties["rotlabel"] into mRotLabel
			put pProperties["TLradius"] into mTLRadius
			put pProperties["TRradius"] into mTRRadius
			put pProperties["BLradius"] into mBLRadius
			put pProperties["BRradius"] into mBRRadius
			put pProperties["ShowTopLeft"] into mShowTopLeft
			put pProperties["ShowTopRight"] into mShowTopRight
			put pProperties["ShowBottomLeft"] into mShowBottomLeft
			put pProperties["ShowBottomRight"] into mShowBottomRight
			put pProperties["bordersize"] into mStroke
			
			if "showLabel" is among the keys of pProperties then
				put pProperties["showLabel"] into mShowLabel
			else
				put true into mShowLabel
			end if		
			
			if "showBorder" is among the keys of pProperties then
				put pProperties["showBorder"] into mShowBorder
			else
				put true into mShowBorder
			end if
			
			if "opaque" is among the keys of pProperties then
				put pProperties["opaque"] into mShowBackground
			else
				put true into mShowBackground
			end if
			
	end handler

-- needed if change the size ------------------

	public handler OnGeometryChanged()
		calcShape()
	end handler

	public handler OnOpen()
		calcShape()
	end handler

-- Mouse actions ------------------------------

	public handler OnMouseUp()
		if the mouse position is within my bounds then
			post "mouseUp" to my script object with [the click button formatted as string] -- formatint needed until dp-2
		else
			post "mouseRelease" to my script object with [the click button formatted as string] -- formatint needed until dp-2
		end if
	end handler


	public handler OnMouseCancel()
		post "mouseRelease" to my script object with [the click button formatted as string] -- formatint needed until dp-2
	end handler


	public handler OnMouseDown()
		post "mouseDown" to my script object with [the click button formatted as string]
	end handler
	
	private handler onMouseHover() returns nothing
   		
	end handler


-- Lets Paint it -----------------------------------------

	public handler OnPaint()
		
	-- Background
		if mShowBackground then
			set the paint of this canvas to my background paint 
			fill mPath on this canvas
		end if
		
	-- Stroke
		if mShowBorder then
			if mStroke > 0 then
			set the paint of this canvas to my border paint
			set the stroke width of this canvas to mStroke
				stroke mPath on this canvas
			end if
		end if
	
	-- Label
		if mShowLabel then
			variable tHeight as Number
			variable tWidth as Number
			variable tBounds as Rectangle
	
			put the bounds of text mLabel on this canvas into tBounds
			put the width of tBounds into mFormattedWidth
			put the height of tBounds into mFormattedHeight
	
			put my width into tWidth
			put my height into tHeight
	
			set the font of this canvas to my font
			set the paint of this canvas to my foreground paint
	
			rotate this canvas by mRotLabel
	
			variable tRectangle as Rectangle
			variable tPath as Path
	
			put rectangle path of rectangle [1,1,tWidth-1,tHeight-1] into tPath
			rotate tPath by (mRotLabel * -1)
	
			put the bounding box of tPath into tRectangle
				
			if mAlign is "right" then
				fill text mLabel at right of tRectangle on this canvas
			else if mAlign is "left" then
				fill text mLabel at left of tRectangle on this canvas
			else
				fill text mLabel at center of tRectangle on this canvas
			end if
		end if
	end handler
end widget